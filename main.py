import json
import uuid      # –î–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID –¥–ª—è –∑–∞–º–µ—Ç–æ–∫
import os        # –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Ñ–∞–π–ª–æ–≤–æ–π —Å–∏—Å—Ç–µ–º–æ–π (–ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —Ñ–∞–π–ª–∞ –∏ —Ç.–¥.)

FILE_NAME = "notes.json"

# –ö–ª–∞—Å—Å Note ‚Äî –æ–ø–∏—Å—ã–≤–∞–µ—Ç –æ–¥–Ω—É –∑–∞–º–µ—Ç–∫—É
class Note:
    def __init__(self, title, content, tags=None, note_id=None):
        self.id = note_id or str(uuid.uuid4())[:8]  # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID (8 —Å–∏–º–≤–æ–ª–æ–≤)
        self.title = title                          # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–º–µ—Ç–∫–∏
        self.content = content                      # –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –∑–∞–º–µ—Ç–∫–∏
        self.tags = tags if tags else []            # –¢–µ–≥–∏ (–µ—Å–ª–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã ‚Äî —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫)

    # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –≤ —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –≤ JSON
    def to_dict(self):
        return {
            "id": self.id,
            "title": self.title,
            "content": self.content,
            "tags": self.tags
        }

    # –°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –∏–∑ —Å–ª–æ–≤–∞—Ä—è
    @staticmethod
    def from_dict(data):
        return Note(data["title"], data["content"], data["tags"], data["id"])

    # –ú–µ—Ç–æ–¥ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∑–∞–º–µ—Ç–∫–∏ –≤ –∫–æ–Ω—Å–æ–ª–∏
    def display(self):
        print("=" * 50)
        print(f"[{self.id}] {self.title.upper()}")  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∑–∞–≥–ª–∞–≤–Ω—ã–º–∏ –±—É–∫–≤–∞–º–∏
        print("-" * 50)
        print(self.content)                         # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–¥–µ—Ä–∂–∞–Ω–∏–µ
        if self.tags:                               # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–≥–∏ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
            print(f"üìå –¢–µ–≥–∏: {', '.join(self.tags)}")
        print("=" * 50)

# –ö–ª–∞—Å—Å NoteApp ‚Äî —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∞–º–∏ –∏ –ª–æ–≥–∏–∫–æ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class NoteApp:
    def __init__(self):
        self.notes = []        # –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫
        self.load_notes()      # –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–º–µ—Ç–∫–∏ –∏–∑ —Ñ–∞–π–ª–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–º–µ—Ç–æ–∫ –≤ JSON-—Ñ–∞–π–ª
    def save_notes(self):
        with open(FILE_NAME, 'w', encoding='utf-8') as f:
            json.dump([note.to_dict() for note in self.notes], f, indent=4, ensure_ascii=False)

    # –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–º–µ—Ç–æ–∫ –∏–∑ JSON-—Ñ–∞–π–ª–∞
    def load_notes(self):
        if os.path.exists(FILE_NAME):
            with open(FILE_NAME, 'r', encoding='utf-8') as f:
                data = json.load(f)
                self.notes = [Note.from_dict(d) for d in data]

    # –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π –∑–∞–º–µ—Ç–∫–∏ —á–µ—Ä–µ–∑ –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    def create_note(self):
        title = input("–ó–∞–≥–æ–ª–æ–≤–æ–∫: ")
        print("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–º–µ—Ç–∫–∏ (–≤ –∫–æ–Ω—Ü–µ –≤–≤–µ–¥–∏—Ç–µ 'END' –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ):")
        lines = []
        while True:
            line = input()
            if line.strip().upper() == "END":
                break
            lines.append(line)
        content = "\n".join(lines)  # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ –≤ –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É —Å –ø–µ—Ä–µ–≤–æ–¥–∞–º–∏ —Å—Ç—Ä–æ–∫
        tags = input("–¢–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): ").split(",")
        tags = [tag.strip() for tag in tags if tag.strip()]  # –û—á–∏—â–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –∏ –ø—É—Å—Ç—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
        note = Note(title, content, tags)  # –°–æ–∑–¥–∞—ë–º –∑–∞–º–µ—Ç–∫—É
        self.notes.append(note)           # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å–ø–∏—Å–æ–∫
        self.save_notes()                 # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        print("‚úÖ –ó–∞–º–µ—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∞.")

    # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏
    def list_notes(self):
        if not self.notes:
            print("–ù–µ—Ç –∑–∞–º–µ—Ç–æ–∫.")
            return
        for note in self.notes:
            note.display()

    # –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–∫–∏ –ø–æ ID
    def find_note_by_id(self, note_id):
        for note in self.notes:
            if note.id == note_id:
                return note
        return None

    # –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏
    def edit_note(self):
        note_id = input("–í–≤–µ–¥–∏—Ç–µ ID –∑–∞–º–µ—Ç–∫–∏: ")
        note = self.find_note_by_id(note_id)
        if not note:
            print("–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        new_title = input(f"–ù–æ–≤—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º —á—Ç–æ–±—ã –Ω–µ –º–µ–Ω—è—Ç—å): ")
        print("–ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç (–≤–≤–µ–¥–∏—Ç–µ 'END' —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å):")
        lines = []
        while True:
            line = input()
            if line.strip().upper() == "END":
                break
            lines.append(line)
        new_content = "\n".join(lines)
        new_tags = input("–ù–æ–≤—ã–µ —Ç–µ–≥–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é): ")

        # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —á—Ç–æ-—Ç–æ –≤–≤—ë–ª
        if new_title:
            note.title = new_title
        if new_content:
            note.content = new_content
        if new_tags:
            note.tags = [tag.strip() for tag in new_tags.split(",") if tag.strip()]

        self.save_notes()
        print("‚úèÔ∏è –ó–∞–º–µ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞.")

    # –£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–º–µ—Ç–∫–∏ –ø–æ ID
    def delete_note(self):
        note_id = input("–í–≤–µ–¥–∏—Ç–µ ID –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: ")
        note = self.find_note_by_id(note_id)
        if not note:
            print("–ó–∞–º–µ—Ç–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return
        self.notes.remove(note)
        self.save_notes()
        print("üóëÔ∏è –ó–∞–º–µ—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")

    # –ü–æ–∏—Å–∫ –∑–∞–º–µ—Ç–æ–∫ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É
    def search_notes(self):
        keyword = input("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞: ").lower()
        found = [n for n in self.notes if
                 keyword in n.title.lower() or
                 keyword in n.content.lower() or
                 any(keyword in tag.lower() for tag in n.tags)]
        if found:
            print(f"üîç –ù–∞–π–¥–µ–Ω–æ {len(found)} –∑–∞–º–µ—Ç–æ–∫:")
            for note in found:
                note.display()
        else:
            print("–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    def run(self):
        while True:
            print("\nüìù –ú–µ–Ω—é:")
            print("1. ‚ûï –°–æ–∑–¥–∞—Ç—å –∑–∞–º–µ—Ç–∫—É")
            print("2. üìã –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–º–µ—Ç–∫–∏")
            print("3. ‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–º–µ—Ç–∫—É")
            print("4. üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –∑–∞–º–µ—Ç–∫—É")
            print("5. üîç –ü–æ–∏—Å–∫ –ø–æ –∑–∞–º–µ—Ç–∫–∞–º")
            print("0. üö™ –í—ã—Ö–æ–¥")

            choice = input("–í—ã–±–æ—Ä: ")

            if choice == '1':
                self.create_note()
            elif choice == '2':
                self.list_notes()
            elif choice == '3':
                self.edit_note()
            elif choice == '4':
                self.delete_note()
            elif choice == '5':
                self.search_notes()
            elif choice == '0':
                print("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä!")

if __name__ == "__main__":
    app = NoteApp()
    app.run()
